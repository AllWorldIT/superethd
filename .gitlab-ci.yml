image: idmslinux/rolling

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

# Stages we need to progress through
stages:
  - test
  - prepare_release
  - release
  - pages

test_job:
  stage: test
  coverage: '/^  lines\.\.\.\.\.\.: (\d+\%) \(\d+ of \d+ lines\)$/'
  script:
  # Create environment
  - pacman -Syu --noconfirm
  # Install dependencies
  - pacman -S --noconfirm
      gcc
      lz4
      zstd
      catch2
      meson
      gcovr
      pkgconf
  # Run tests and coverage
  - contrib/scripts/coverage
  # Save coverage report
  - mv build/meson-logs/coveragereport dist/
  artifacts:
    expire_in: 1 day
    paths:
    - dist/

prepare_release:
  stage: prepare_release
  rules:
    - if: $CI_COMMIT_TAG
  script:
  - pacman -Syu --noconfirm
  # Install dependencies
  - pacman -S --noconfirm
      gcc
      lz4
      zstd
      catch2
      meson
      gcovr
  # Build docs and packages
  - contrib/scripts/dist
  # Move dist files
  - mv build/meson-dist/*.tar.xz* dist/
  # Work out commit range for changelog
  - LAST_TAG=$(git tag --sort -version:refname | head -n2 | tail -n1)
  - if [ -n "$LAST_TAG" ]; then COMMIT_RANGE="$LAST_TAG..$CI_COMMIT_TAG"; else COMMIT_RANGE=""; fi
  # Output description file
  - echo "Automatic release based on tag $CI_COMMIT_TAG" > dist/description.txt
  # Check if we can add the changelog
  - CHANGELOG=$(git log --oneline --decorate --no-merges $COMMIT_RANGE)
  - |
    if [ -n "$CHANGELOG" ]; then
      echo "# Changelog" >> dist/description.txt
      echo '```' >> dist/description.txt
      echo "$CHANGELOG" >> dist/description.txt
      echo '```' >> dist/description.txt
    fi
  artifacts:
    expire_in: 1 day
    paths:
    - dist/


release_gitlab:
  stage: release
  rules:
  - if: $CI_COMMIT_TAG
  script:
  - pacman -Syu --noconfirm
  - pacman -S --noconfirm
      curl
      release-cli
  # Work out variables
  - PACKAGE_VERSION=$(echo "$CI_COMMIT_TAG" | sed -e 's/^v//')
  - PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/releases/${PACKAGE_VERSION}"
  # Grab description
  - DESCRIPTION=$(cat dist/description.txt)
  # Build asset JSON
  - cd dist
  - assets=()
  - |
    for p in $(find . -name "*.tar.*" | sort); do
      assets+=("--assets-link={\"name\":\"${p}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${p}\"}")
    done
  - echo -e "ASSETS:\n${assets[@]}"
  # Upload assets
  - |
    for p in $(find . -name "*.tar.*" | sort); do
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${p}" "${PACKAGE_REGISTRY_URL}/${p}"
    done
  # Release
  - release-cli create --name "Release $CI_COMMIT_TAG" --tag-name "$CI_COMMIT_TAG" --description "$DESCRIPTION" "${assets[@]}"


pages:
  stage: pages
  rules:
    - if: $CI_COMMIT_TAG
  script:
    # Create environment
    - pacman -Syu --noconfirm
    # Move documentation to public/
    - mkdir public
    - mv dist/coveragereport public/
    # This is the only supported path in gitlab
    - echo "<a href=\"coveragereport/index.html\">Coverage Report</a>" > public/index.html
  artifacts:
    paths:
    - public/
